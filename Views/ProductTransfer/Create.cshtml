@model Inventory_Management_System.ViewModels.ProductTransferViewModel

@{
    ViewData["Title"] = "Product Transfer";
}

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">New Product Transfer</h4>
                </div>
                <div class="card-body">
                    <form asp-action="Create" id="transferForm">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                   

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label asp-for="TransferDate" class="control-label"></label>
                                    <input asp-for="TransferDate" class="form-control" type="date" />
                                    <span asp-validation-for="TransferDate" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label asp-for="SourceWarehouseId" class="control-label"></label>
                                    <select asp-for="SourceWarehouseId" class="form-control custom-dropdown" asp-items="ViewBag.Warehouses">
                                        <option value="">-- Select Source Warehouse --</option>
                                    </select>
                                    <span asp-validation-for="SourceWarehouseId" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label asp-for="DestinationWarehouseId" class="control-label"></label>
                                    <select asp-for="DestinationWarehouseId" class="form-control custom-dropdown" asp-items="ViewBag.Warehouses">
                                        <option value="">-- Select Destination Warehouse --</option>
                                    </select>
                                    <span asp-validation-for="DestinationWarehouseId" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-3 custom-card">
                            <div class="card-header custom-card-header">
                                <h5 class="mb-0">Products Available in Source Warehouse</h5>
                            </div>
                            <div class="card-body custom-card-body">
                                <div id="productsTable" style="display: none;">
                                    <div class="table-responsive">
                                        <table class="table table-bordered table-hover">
                                            <thead class="thead-dark">
                                                <tr>
                                                    <th>Product</th>
                                                    <th>Supplier</th>
                                                    <th>Production Date</th>
                                                    <th>Expiry Period</th>
                                                    <th>Available Quantity</th>
                                                    <th>Requested Quantity</th>
                                                    <th>Add</th>
                                                </tr>
                                            </thead>
                                            <tbody id="productsTableBody">
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <div id="noWarehouseSelected" class="alert alert-info">
                                    <i class="fas fa-info-circle"></i> Please select a source warehouse to view available products.
                                </div>
                                <div id="loadingProducts" style="display: none;" class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                    <p>Loading products...</p>
                                </div>
                                <div id="noProducts" style="display: none;" class="alert alert-warning">
                                    <i class="fas fa-exclamation-triangle"></i> No products available in this warehouse.
                                </div>
                            </div>
                        </div>

                        <div class="card mb-3 custom-card">
                            <div class="card-header custom-card-header">
                                <h5 class="mb-0">Products to Transfer</h5>
                            </div>
                            <div class="card-body custom-card-body">
                                <div class="table-responsive">
                                    <table class="table table-bordered table-hover" id="selectedProductsTable">
                                        <thead class="thead-dark">
                                            <tr>
                                                <th>Product</th>
                                                <th>Supplier</th>
                                                <th>Production Date</th>
                                                <th>Quantity</th>
                                                <th>Remove</th>
                                            </tr>
                                        </thead>
                                        <tbody id="selectedProductsTableBody">
                                            <tr id="noItemsRow">
                                                <td colspan="5" class="text-center text-muted">
                                                    <i class="fas fa-box"></i> No products added yet.
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <div class="form-group text-center">
                            <button type="submit" class="btn btn-primary btn-lg" id="submitButton" disabled>
                                <i class="fas fa-exchange-alt"></i> Execute Transfer
                            </button>
                            <a asp-action="Index" class="btn btn-secondary btn-lg">
                                <i class="fas fa-times"></i> Cancel
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

    <script>
        $(document).ready(function () {
            let selectedProducts = [];

            // Handle source warehouse change
            $('#SourceWarehouseId').change(function () {
                const warehouseId = $(this).val();
                clearProducts();

                if (!warehouseId) {
                    $('#productsTable').hide();
                    $('#noWarehouseSelected').show();
                    return;
                }

                loadWarehouseProducts(warehouseId);
            });

            // Load products from warehouse
            function loadWarehouseProducts(warehouseId) {
                $('#productsTable').hide();
                $('#noWarehouseSelected').hide();
                $('#loadingProducts').show();
                $('#noProducts').hide();

                $.get('/ProductTransfer/GetWarehouseProducts', { warehouseId: warehouseId })
                    .done(function (data) {
                        $('#loadingProducts').hide();

                        if (data && data.length > 0) {
                            displayProducts(data);
                        } else {
                            $('#noProducts').show();
                        }
                    })
                    .fail(function (error) {
                        $('#loadingProducts').hide();
                        alert('An error occurred while loading products');
                        console.error('Error:', error);
                    });
            }

            // Display products in table
            function displayProducts(products) {
                const tbody = $('#productsTableBody');
                tbody.empty();

                products.forEach(function (product) {
                    const row = `
                        <tr>
                            <td>${product.productName}</td>
                            <td>${product.supplierName}</td>
                            <td>${new Date(product.productionDate).toLocaleDateString()}</td>
                            <td>${product.expiryPeriodInDays} days</td>
                            <td>${product.quantity}</td>
                            <td>
                                <input type="number" class="form-control quantity-input"
                                       min="1" max="${product.quantity}" value="1"
                                       data-product-id="${product.productId}"
                                       data-supplier-id="${product.supplierId}"
                                       style="width: 100px">
                            </td>
                            <td>
                                <button type="button" class="btn btn-success btn-sm add-product"
                                        data-product-id="${product.productId}"
                                        data-product-name="${product.productName}"
                                        data-supplier-id="${product.supplierId}"
                                        data-supplier-name="${product.supplierName}"
                                        data-production-date="${product.productionDate}"
                                        data-expiry-period="${product.expiryPeriodInDays}"
                                        data-available-quantity="${product.quantity}">
                                    <i class="fas fa-plus"></i> Add
                                </button>
                            </td>
                        </tr>
                    `;
                    tbody.append(row);
                });

                $('#productsTable').show();
            }

            // Add product to transfer list
            $(document).on('click', '.add-product', function () {
                const btn = $(this);
                const row = btn.closest('tr');
                const quantity = parseInt(row.find('.quantity-input').val());
                const maxQuantity = parseInt(btn.data('available-quantity'));

                if (isNaN(quantity) || quantity <= 0 || quantity > maxQuantity) {
                    alert('Please enter a valid quantity');
                    return;
                }

                const product = {
                    productId: btn.data('product-id'),
                    productName: btn.data('product-name'),
                    supplierId: btn.data('supplier-id'),
                    supplierName: btn.data('supplier-name'),
                    productionDate: btn.data('production-date'),
                    expiryPeriodInDays: btn.data('expiry-period'),
                    quantity: quantity
                };

                // Check if product already exists
                const existingProduct = selectedProducts.find(p =>
                    p.productId === product.productId &&
                    p.supplierId === product.supplierId &&
                    p.productionDate === product.productionDate
                );

                if (existingProduct) {
                    alert('This product is already in the transfer list');
                    return;
                }

                selectedProducts.push(product);
                updateSelectedProductsTable();
                updateSubmitButton();
            });

            // Update selected products table
            function updateSelectedProductsTable() {
                const tbody = $('#selectedProductsTableBody');
                tbody.empty();

                if (selectedProducts.length === 0) {
                    tbody.html(`
                        <tr id="noItemsRow">
                            <td colspan="5" class="text-center text-muted">
                                <i class="fas fa-box"></i> No products added yet.
                            </td>
                        </tr>
                    `);
                    return;
                }

                selectedProducts.forEach(function (product, index) {
                    const row = `
                        <tr>
                            <td>
                                ${product.productName}
                                <input type="hidden" name="Items[${index}].ProductId" value="${product.productId}">
                                <input type="hidden" name="Items[${index}].ProductName" value="${product.productName}">
                            </td>
                            <td>
                                ${product.supplierName}
                                <input type="hidden" name="Items[${index}].SupplierId" value="${product.supplierId}">
                                <input type="hidden" name="Items[${index}].SupplierName" value="${product.supplierName}">
                            </td>
                            <td>
                                ${new Date(product.productionDate).toLocaleDateString()}
                                <input type="hidden" name="Items[${index}].ProductionDate" value="${product.productionDate}">
                                <input type="hidden" name="Items[${index}].ExpiryPeriodInDays" value="${product.expiryPeriodInDays}">
                            </td>
                            <td>
                                ${product.quantity}
                                <input type="hidden" name="Items[${index}].Quantity" value="${product.quantity}">
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger btn-sm remove-product" data-index="${index}">
                                <i class="fas fa-trash"></i> Remove
                                </button>
                            </td>
                        </tr>
                    `;
                    tbody.append(row);
                });
            }

            // Remove product from transfer list
            $(document).on('click', '.remove-product', function () {
                const index = $(this).data('index');
                selectedProducts.splice(index, 1);
                updateSelectedProductsTable();
                updateSubmitButton();
            });

            // Clear products when changing source warehouse
            function clearProducts() {
                selectedProducts = [];
                updateSelectedProductsTable();
                updateSubmitButton();
            }

            // Update submit button state
            function updateSubmitButton() {
                const sourceWarehouse = $('#SourceWarehouseId').val();
                const destinationWarehouse = $('#DestinationWarehouseId').val();
                const hasProducts = selectedProducts.length > 0;
                const warehousesAreDifferent = sourceWarehouse && destinationWarehouse && sourceWarehouse !== destinationWarehouse;

                $('#submitButton').prop('disabled', !hasProducts || !warehousesAreDifferent);
            }

            // Handle destination warehouse change
            $('#DestinationWarehouseId').change(function () {
                updateSubmitButton();
            });

            // Form validation
            $('#transferForm').submit(function (e) {
                if (!selectedProducts.length) {
                    e.preventDefault();
                    alert('Please add at least one product to transfer');
                    return false;
                }
            });
        });
    </script>

    <style>
        /* Custom dropdown styling */
        .custom-dropdown {
            background-color: #999ce3 !important;
            color: white !important;
        }

            .custom-dropdown option {
                background-color: #999ce3 !important;
                color: white !important;
            }

        /* Custom card styling for product sections */
        .custom-card {
            background-color: #999ce3 !important;
        }

        .custom-card-header {
            background-color: #999ce3 !important;
            color: white !important;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2) !important;
        }

        .custom-card-body {
            background-color: #999ce3 !important;
        }

        /* Make sure tables inside custom cards have proper styling */
        .custom-card .table {
            background-color: #999ce3 !important;
        }

        .custom-card .alert {
            background-color: rgba(255, 255, 255, 0.9) !important;
            border: 1px solid rgba(255, 255, 255, 0.3) !important;
        }

        .table th {
            background-color: #343a40;
            color: white;
            text-align: center;
            vertical-align: middle;
        }

        .table td {
            vertical-align: middle;
            text-align: center;
            /* For right-to-left layout, you might want to keep this right-aligned or adjust as needed */
            /* text-align: right; */
        }

        .quantity-input {
            text-align: center;
            margin: 0 auto;
        }

        .btn-lg {
            padding: 0.75rem 1.5rem;
            font-size: 1.1rem;
        }

        .card {
            margin-bottom: 1.5rem;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }

        .card-header {
            font-weight: bold;
        }

        .alert {
            border-radius: 0.25rem;
        }
    </style>
}