@model Inventory_Management_System.ViewModels.AddReleaseOrderViewModel

@{
    ViewData["Title"] = Model.Id == 0 ? "Create Release Order" : "Edit Release Order";
}

<style>
    select.form-control {
        background-color: #7d76cf !important;
    }

    .btn.btn-primary, .btn.btn-secondary {
        border-radius: 10px;
    }

    .button-group {
        display: flex;
        justify-content: flex-start;
        gap: 10px;
        margin-top: 20px;
    }

    .back-button-container {
        margin-top: 15px;
        text-align: left;
    }

    .warehouse-stock-display {
        margin-top: 20px;
        padding: 15px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #7d76cf !important;
    }

        .warehouse-stock-display h4 {
            margin-top: 0;
            margin-bottom: 10px;
        }

        .warehouse-stock-display ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .warehouse-stock-display li {
            padding: 5px 0;
            border-bottom: 1px dotted #eee;
        }

            .warehouse-stock-display li:last-child {
                border-bottom: none;
            }
</style>

<h2>@ViewData["Title"]</h2>

<div asp-validation-summary="All" class="text-danger"></div>

<form asp-action="@(Model.Id == 0 ? "Create" : "Edit")" method="post">
    @if (Model.Id != 0)
    {
        <input type="hidden" asp-for="Id" />
    }

    <div class="form-group">
        <label asp-for="OrderNumber"></label>
        <input asp-for="OrderNumber" class="form-control" />
        <span asp-validation-for="OrderNumber" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="OrderDate"></label>
        <input asp-for="OrderDate" class="form-control" type="date" />
        <span asp-validation-for="OrderDate" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="WarehouseId"></label>
        <select asp-for="WarehouseId" asp-items="@(new SelectList(Model.Warehouses, "Id", "Name"))" class="form-control" id="WarehouseId">
            <option value="">-- Select Warehouse --</option>
        </select>
        <span asp-validation-for="WarehouseId" class="text-danger"></span>
    </div>

    <!-- Warehouse stock display -->
    <div class="warehouse-stock-display">
        <h4>Current Warehouse Stock:</h4>
        <div id="warehouse-stock-list">
            <p>Select a warehouse to see its stock.</p>
        </div>
    </div>

    <div class="form-group">
        <label asp-for="SupplierId"></label>
        <select asp-for="SupplierId" asp-items="@(new SelectList(Model.Suppliers, "Id", "Name"))" class="form-control">
            <option value="">-- Select Supplier --</option>
        </select>
        <span asp-validation-for="SupplierId" class="text-danger"></span>
    </div>

    <h4>Items</h4>
    <table class="table" id="items-table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Items.Count; i++)
            {
                <tr>
                    <td>
                        <select asp-for="@Model.Items[i].ProductId" asp-items="@(new SelectList(Model.Products, "Id", "Name"))" class="form-control product-select" onchange="displayAvailableQuantity(this)">
                            <option value="">-- Select --</option>
                        </select>
                        <span asp-validation-for="@Model.Items[i].ProductId" class="text-danger"></span>
                    </td>
                    <td>
                        <input asp-for="@Model.Items[i].Quantity" class="form-control" />
                        <span asp-validation-for="@Model.Items[i].Quantity" class="text-danger"></span>
                        <small class="form-text text-muted">Available: <span class="available-quantity">0</span></small>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="button-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <a asp-action="Index" asp-controller="ReleaseOrder" class="btn btn-secondary">Back</a>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        let productList = @Html.Raw(Json.Serialize(Model.Products));

        function addRow() {
            let index = document.querySelectorAll("#items-table tbody tr").length;
            let row = `
            <tr>
                <td>
                    <select name="Items[${index}].ProductId" class="form-control product-select" onchange="displayAvailableQuantity(this)">
                        <option value="">-- Select --</option>
                        ${productList.map(p => `<option value="${p.Id}">${p.Name}</option>`).join('')}
                    </select>
                </td>
                <td>
                    <input name="Items[${index}].Quantity" class="form-control" />
                    <span class="text-danger field-validation-valid" data-valmsg-for="Items[${index}].Quantity" data-valmsg-replace="true"></span>
                    <small class="form-text text-muted">Available: <span class="available-quantity">0</span></small>
                </td>
                <td><button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button></td>
            </tr>`;
            document.querySelector("#items-table tbody").insertAdjacentHTML("beforeend", row);
        }

        function removeRow(button) {
            let tbody = button.closest("tbody");
            button.closest("tr").remove();

            tbody.querySelectorAll("tr").forEach((row, idx) => {
                row.querySelectorAll("select, input, span[data-valmsg-for]").forEach(el => {
                    if (el.name) el.name = el.name.replace(/\[\d+\]/, `[${idx}]`);
                    if (el.hasAttribute("data-valmsg-for")) {
                        el.setAttribute("data-valmsg-for", el.getAttribute("data-valmsg-for").replace(/\[\d+\]/, `[${idx}]`));
                    }
                });
            });
        }

        async function displayAvailableQuantity(selectElement) {
            const productId = selectElement.value;
            const warehouseId = document.getElementById('WarehouseId').value;
            const span = selectElement.closest('td').nextElementSibling.querySelector('.available-quantity');

            if (productId && warehouseId) {
                try {
                    const res = await fetch(`/ReleaseOrder/GetProductQuantityInWarehouse?productId=${productId}&warehouseId=${warehouseId}`);
                    span.textContent = res.ok ? await res.json() : 'N/A';
                } catch { span.textContent = 'Error'; }
            } else { span.textContent = '0'; }
        }

        async function loadWarehouseProducts() {
            const warehouseId = document.getElementById('WarehouseId').value;
            const stockDiv = document.getElementById('warehouse-stock-list');

            if (warehouseId) {
                try {
                    const res = await fetch(`/ReleaseOrder/GetProductsInWarehouse?warehouseId=${warehouseId}`);
                    if (res.ok) {
                        const products = await res.json();
                        stockDiv.innerHTML = products.length
                            ? '<ul>' + products.map(p => `<li><strong>${p.name}:</strong> ${p.quantity}</li>`).join('') + '</ul>'
                            : '<ul><li>No products found in this warehouse.</li></ul>';
                    } else { stockDiv.innerHTML = '<p class="text-danger">Error loading warehouse stock.</p>'; }
                } catch {
                    stockDiv.innerHTML = '<p class="text-danger">Error loading warehouse stock.</p>';
                }
            } else { stockDiv.innerHTML = '<p>Select a warehouse to see its stock.</p>'; }

            document.querySelectorAll('.product-select').forEach(displayAvailableQuantity);
        }

        document.getElementById('WarehouseId').addEventListener('change', () => {
            loadWarehouseProducts();
            document.querySelectorAll('.product-select').forEach(displayAvailableQuantity);
        });

        document.addEventListener('DOMContentLoaded', () => {
            loadWarehouseProducts();
            document.querySelectorAll('.product-select').forEach(displayAvailableQuantity);
        });
    </script>
}
